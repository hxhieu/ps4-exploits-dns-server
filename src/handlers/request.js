import async from 'async';
import dns from 'native-dns';
import { logInfo } from '../utils/logger';
import { dnsProxy } from '../utils/dns-proxy';
import config from '../../config.json';

const entries = [
  {
    domain: 'playstation.net',
    records: [{ type: 'A', address: config.ps4host, ttl: 1800 }],
  },
];

export const requestHandler = (req, res) => {
  const f = []; // array of functions

  // proxy all questions
  // since proxying is asynchronous, store all callbacks
  req.question.forEach((question) => {
    const entry = entries.filter(r => new RegExp(r.domain, 'i').exec(question.name));
    // logInfo(`request from, ${req.address.address}, for, ${req.question[0].name}`);
    if (entry.length) {
      entry[0].records.forEach((record) => {
        const altRecord = record;
        altRecord.name = question.name;
        altRecord.ttl = record.ttl || 1800;

        logInfo(`Redirect ${question.name} -> ${altRecord.address}`);

        res.answer.push(dns[altRecord.type](altRecord));
      });
    } else {
      f.push(cb => dnsProxy(question, res, cb));
    }
  });

  // do the proxying in parallel
  // when done, respond to the request by sending the response
  async.parallel(f, () => {
    res.send();
  });
};
